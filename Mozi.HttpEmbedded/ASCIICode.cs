namespace Mozi.HttpEmbedded
{
    /// <summary>
    /// ASCII码表
    /// </summary>
    public class ASCIICode
    {
        public const byte NUT = 0; 	//NUL (null) 空字符
        public const byte SOH = 1; 	//SOH (start of handing) 标题开始
        public const byte STX = 2;	//STX (start of text) 正文开始
        public const byte ETX = 3; 	//ETX (end of text) 正文结束
        public const byte EOT = 4; 	//EOT (end of transmission) 传输结束
        public const byte ENQ = 5; 	//ENQ (enquiry) 请求
        public const byte ACK = 6; 	//ACK (acknowledge) 收到通知
        public const byte BEL = 7; 	//BEL (bell) 响铃
        public const byte BS = 8; 	//BS (backspace) 退格
        public const byte HT = 9; 	//HT (horizontal tab) 水平制表符
        public const byte LF = 10; 	//LF (NL line feed; new line) 换行键
        public const byte VT = 11; 	//VT (vertical tab) 垂直制表符
        public const byte FF = 12; 	//FF (NP form feed; new page) 换页键
        public const byte CR = 13; 	//CR (carriage return) 回车键
        public const byte SO = 14; 	//SO (shift out) 不用切换
        public const byte SI = 15; 	//SI (shift in) 启用切换
        public const byte DLE = 16; 	//DLE (data link escape) 数据链路转义
        public const byte DCI = 17; 	//DC1 (device control 1) 设备控制1
        public const byte DC2 = 18; 	//DC2 (device control 2) 设备控制2
        public const byte DC3 = 19; 	//DC3 (device control 3) 设备控制3
        public const byte DC4 = 20; 	//DC4 (device control 4) 设备控制4
        public const byte NAK = 21; 	//NAK (negative acknowledge) 拒绝接收
        public const byte SYN = 22; 	//SYN (synchronous idle) 同步空闲
        public const byte TB = 23; 	//ETB (end of trans. block) 传输块结束
        public const byte CAN = 24; 	//CAN (cancel) 取消
        public const byte EM = 25; 	//EM (end of medium) 介质中断
        public const byte SUB = 26; 	//SUB (substitute) 替补
        public const byte ESC = 27; 	//ESC (escape) 溢出
        public const byte FS = 28; 	//FS (file separator) 文件分割符
        public const byte GS = 29; 	//GS (group separator) 分组符
        public const byte RS = 30; 	//RS (record separator) 记录分离符
        public const byte US = 31; 	//US (unit separator) 单元分隔符
        public const byte SPACE = 32; 	//空格
        public const byte EXCLAMATION = 33; 	//!
        public const byte QUOTE = 34; 	//"
        public const byte POUND = 35; 	//#
        public const byte DOLLAR = 36; 	//$
        public const byte PERCENT = 37; 	//%
        public const byte AND = 38; 	//&
        public const byte QUOTE_SINGLE = 39; 	//'
        public const byte OPEN_PARENTHESIS = 40; 	//(
        public const byte CLOSE_PARENTHESIS = 41; 	//)
        public const byte MULTIPLY = 42; 	//*
        public const byte PLUS = 43; 	//+
        public const byte COMMA = 44; 	//,
        public const byte MINUS = 45; 	//-
        public const byte DOT = 46; 	//.
        public const byte DIVIDE = 47; 	// /
        public const byte NUM_0 = 48; 	//0
        public const byte NUM_1 = 49; 	//1
        public const byte NUM_2 = 50; 	//2
        public const byte NUM_3 = 51; 	//3
        public const byte NUM_4 = 52; 	//4
        public const byte NUM_5 = 53; 	//5
        public const byte NUM_6 = 54; 	//6
        public const byte NUM_7 = 55; 	//7
        public const byte NUM_8 = 56; 	//8
        public const byte NUM_9 = 57; 	//9
        public const byte COLON = 58; 	//:
        public const byte SEMICOLON = 59; 	//;
        public const byte LESS = 60; 	//<
        public const byte EQUAL = 61; 	//=
        public const byte MORE = 62; 	//>
        public const byte QUESTION = 63; 	//?
        public const byte AT = 64; 	//@
        public const byte CHAR_A = 65; 	//A
        public const byte CHAR_B = 66; 	//B
        public const byte CHAR_C = 67; 	//C
        public const byte CHAR_D = 68; 	//D
        public const byte CHAR_E = 69; 	//E
        public const byte CHAR_F = 70; 	//F
        public const byte CHAR_G = 71; 	//G
        public const byte CHAR_H = 72; 	//H
        public const byte CHAR_I = 73; 	//I
        public const byte CHAR_J = 74; 	//J
        public const byte CHAR_K = 75; 	//K
        public const byte CHAR_L = 76; 	//L
        public const byte CHAR_M = 77; 	//M
        public const byte CHAR_N = 78; 	//N
        public const byte CHAR_O = 79; 	//O
        public const byte CHAR_P = 80; 	//P
        public const byte CHAR_Q = 81; 	//Q
        public const byte CHAR_R = 82; 	//R
        public const byte CHAR_S = 83; 	//S
        public const byte CHAR_T = 84; 	//T
        public const byte CHAR_U = 85; 	//U
        public const byte CHAR_V = 86; 	//V
        public const byte CHAR_W = 87; 	//W
        public const byte CHAR_X = 88; 	//X
        public const byte CHAR_Y = 89; 	//Y
        public const byte CHAR_Z = 90; 	//Z
        public const byte OPEN_BRACKET = 91; 	//[
        public const byte SLASH = 92; 	//\
        public const byte CLOSE_BRACKET = 93; 	//]
        public const byte CARET = 94; 	//^
        public const byte UNDERSCORE = 95; 	//_
        public const byte APOSTR0PHE = 96; 	//`
        public const byte CHAR_a = 97; 	//a
        public const byte CHAR_b = 98; 	//b
        public const byte CHAR_c = 99; 	//c
        public const byte CHAR_d = 100;	//d
        public const byte CHAR_e = 101;	//e
        public const byte CHAR_f = 102;	//f
        public const byte CHAR_g = 103;	//g
        public const byte CHAR_h = 104;	//h
        public const byte CHAR_i = 105;	//i
        public const byte CHAR_j = 106;	//j
        public const byte CHAR_k = 107;	//k
        public const byte CHAR_l = 108;	//l
        public const byte CHAR_m = 109;	//m
        public const byte CHAR_n = 110;	//n
        public const byte CHAR_o = 111;	//o
        public const byte CHAR_p = 112;	//p
        public const byte CHAR_q = 113;	//q
        public const byte CHAR_r = 114;	//r
        public const byte CHAR_s = 115;	//s
        public const byte CHAR_t = 116;	//t
        public const byte CHAR_u = 117;	//u
        public const byte CHAR_v = 118;	//v
        public const byte CHAR_w = 119;	//w
        public const byte CHAR_x = 120;	//x
        public const byte CHAR_y = 121;	//y
        public const byte CHAR_z = 122;	//z
        public const byte OPEN_BRACE = 123;	//{
        public const byte OR = 124;	//|
        public const byte CLOSE_BRACE = 125;	//}
        public const byte TILDE = 126;	//~
        public const byte DEL = 127; //DEL (delete) 删除
    }
}